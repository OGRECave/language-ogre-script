{
    "scopeName": "source.ogre.script",
    "patterns": [
        {
            "begin": "\\b(import)\\b",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.import"
                }
            },
            "comment": "Import statement",
            "patterns": [
                {
                    "match": "\\b(from)\\b",
                    "name": "constant.language"
                }
            ],
            "end": "($|//)"
        },
        {
            "match": "\\b(abstract)\\b",
            "name": "entity.name.tag"
        },
        {
            "match": "\\b(set)\\b",
            "name": "entity.name.function"
        },
        {
            "begin": "\\b(texture_ref)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Texture Reference",
            "end": "($|//)"
        },
        {
            "begin": "\\b((?:set_)?texture_alias)\\b\\s*(\\S+)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                },
                "2": {
                    "name": "variable.other"
                }
            },
            "comment": "Texture Alias for materials",
            "end": "($|//)"
        },
        {
            "begin": "\\b(buffers)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Buffers Directive for clear pass",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(colour|depth|stencil)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(lod_strategy)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Lod strategy in materials",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(distance_(box|sphere)|(screen_ratio_)?pixel_count)\\b",
                    "name": "constant.language"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(lod_values)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Lod values in materials",
            "end": "($|//)",
            "patterns": [
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(depth_func|comp_func)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(always_fail|always_pass|less|less_equal|not_equal|greater_equal|greater)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(gpu_vendor_rule)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "GPU vendor rules",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(include|exclude)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(scene_blend|separate_scene_blend|colour_op_multipass_fallback)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Scene blend rules for materials",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(add|modulate|alpha_blend|colour_blend)\\b",
                    "name": "constant.language"
                },
                {
                    "match": "\\b(one|zero|dest_colour|src_colour|one_minus_dest_colour|one_minus_src_colour|dest_alpha|src_alpha|one_minus_dest_alpha|one_minus_src_alpha)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(scene_blend_op|separate_scene_blend_op)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Scene blend operations for materials",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(add|subtract|reverse_subtract|min|max)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(cull_hardware|cull_software)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Culling operations for materials",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(clockwise|anticlockwise|none|back|front)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(shading)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Shading operations for materials",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(flat|gouraud|phong)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(polygon_mode)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Polygon modes for materials",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(solid|wireframe|points)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(env_map)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Texture unit environment map",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(off|spherical|planar|cubic_reflection|cubic_normal)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(cubic_texture)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Cubic texture format",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(combinedUVW|separateUV)\\b",
                    "name": "constant.language"
                },
                {
                    "match": "\\S+",
                    "name": "string"
                }
            ]
        },
        {
            "begin": "\\b(binding_type)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Texture binding type",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(vertex|fragment)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(tex_address_mode)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Texture address mode",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(wrap|clamp|mirror|border)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(filtering)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Texture filtering mode",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(none|point|linear|bilinear|trilinear|anisotropic)\\b",
                    "name": "constant.language"
                }
            ]
        },
        {
            "begin": "\\b(colour_op|colour_op_ex|alpha_op_ex)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Texture unit colour/alpha operations",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(replace|blend_diffuse_alpha|blend_texture_alpha|blend_current_alpha|blend_manual|dotproduct|blend_diffuse_colour|src_current|src_texture|src_diffuse|src_specular|src_manual|add|add_signed|add_smooth|subtract|modulate|modulate_x2|modulate_x4|alpha_blend|source1|source2)\\b",
                    "name": "constant.language"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(param_indexed|param_named|shared_param_named)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Shader program indexed/named parameters",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(float[0-9]*|u?int[0-9]*|matrix[2-4]x[2-4])\\b",
                    "name": "storage.type"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(param_indexed_auto|param_named_auto)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Shader program indexed/named auto parameters",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b((inverse_)?(transpose_)?(world|view|projection|worldview|viewproj|worldviewproj|texture)_matrix|(world|bone)_matrix_array_3x4|(world|bone)_dualquaternion_array_2x4|normal_matrix|render_target_flipping|light_(diffuse|specular)_colour(_power_scaled)?(_array)?|light_attenuation|spotlight_params|light_(position|direction)(_object_space|_view_space)?(_array)?|light_distance_object_space|light_power|light_number|light_attenuation_array|spotlight_params_array|light_distance_object_space_array|light_power_array|light_count|light_casts_shadows|ambient_light_colour|surface_(ambient|diffuse|specular|emissive)_colour|surface_shininess|surface_alpha_rejection_value|derived_ambient_light_colour|derived_scene_colour|derived_light_(diffuse|specular)_colour(_array)?|fog_colour|fog_params|(lod_)?camera_position(_object_space)?|(frame_)?time|(sin|cos|tan)?time_0_(x|1|2pi)|time_0_(x|1|2pi)_packed|fps|(inverse_)?viewport_(width|height)|viewport_size|texel_offsets|view_direction|view_side_vector|view_up_vector|fov|(near|far)_clip_distance|texture_(world)?viewproj_matrix(_array)?|spotlight_(world)?viewproj_matrix|scene_depth_range|shadow_scene_depth_range|shadow_colour|shadow_extrusion_distance|(inverse_|packed_)?texture_size|pass_number|pass_iteration_number|animation_parametric|(light_)?custom|point_params|material_lod_index)\\b",
                    "name": "storage.type"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(wave_xform)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Texture unit wave_xform animation",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(scroll_x|scroll_y|rotate|scale_x|scale_y|sine|triangle|square|sawtooth|inverse_sawtooth|)\\b",
                    "name": "constant.language"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(content_type)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "texture content type",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(named|compositor|shadow)\\b",
                    "name": "constant.language"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(alpha_rejection)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "alpha functions for materials",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(always_fail|always_pass|less|less_equal|equal|not_equal|greater_equal|greater)\\b",
                    "name": "constant.language"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(optimisation_level)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "HLSL optimization level",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(none|default)\\b",
                    "name": "constant.language"
                },
                {
                    "match": "\\b([0-3])\\b",
                    "name": "constant.numeric"
                }
            ]
        },
        {
            "begin": "\\b(input_operation_type|output_operation_type|max_output_vertices)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "GLSL geometry shader defines",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(point_list|line_list|line_strip|triangle_list|triangle_strip|triangle_fan)\\b",
                    "name": "constant.language"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(fog_override)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Fog overrides for materials",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(none|linear|exp|exp2)\\b",
                    "name": "constant.language"
                },
                {
                    "include": "#boolean"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(iteration)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Iteration for material passes",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(once_per_light|once|point|directional|spot|per_light|per_n_lights)\\b",
                    "name": "constant.language"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(illumination_stage)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Iteration for material passes",
            "end": "($|//)",
            "patterns": [
                {
                    "match": "\\b(ambient|per_light|decal)\\b",
                    "name": "constant.language"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        {
            "begin": "\\b(manual_named_constants)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Keyword with nothing special after them",
            "end": "($|//)"
        },
        {
            "begin": "\\b(depth_check|compare_test|depth_write|alpha_to_coverage|light_scissor|light_clip_planes|only_initial|shadows|check|two_sided|point_sprites|point_size_attenuation|receive_shadows|colour_write|lighting|transparent_sorting|transparency_casts_shadows)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Keyword On/Off",
            "end": "($|//)",
            "patterns": [
                {
                    "include": "#boolean"
                }
            ]
        },
        {
            "begin": "\\b(polygon_mode_overrideable|includes_instancing|includes_skeletal_animation|includes_morph_animation|uses_vertex_texture_fetch|uses_adjacency_information|column_major_matrices)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Keyword true/false",
            "end": "($|//)",
            "patterns": [
                {
                    "include": "#boolean"
                }
            ]
        },
        {
            "begin": "\\b(material_scheme|shadow_(caster|receiver)_material|scheme|material|compositor_logic|delegate|sampler_ref|attach|shared_params_ref)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Keywords followed by names",
            "end": "($|//)"
        },
        {
            "begin": "\\b(source|entry_point|texture|image)\\b",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Keywords followed by strings",
            "end": "($|//)",
            "name": "string"
        },
        {
            "match": "\\b(lod_index|point_size|depth_bias|iteration_depth_bias|first_render_queue|last_render_queue|visibility_mask|anim_texture|point_size_min|point_size_max|lod_bias|identifier|start_light|max_lights|depth_value|stencil_value|ref_value|mask|tex_coord_set|tex_border_colour|max_anisotropy|mipmap_bias|scroll|scroll_anim|rotate|rotate_anim|scale|transform|preprocessor_defines|includes_pose_animation)\\b",
            "name": "entity.name.function"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#numeric"
        },
        {
            "include": "#boolean"
        },
        {
            "include": "#variable"
        },
        {
            "include": "#string-double-quoted"
        }
    ],
    "repository": {
        "variable": {
            "comment": "Ogre Variable. Taken from PHP",
            "patterns": [
                {
                    "match": "(?x)\n        \t\t\t            (\\$+)[a-zA-Z_\\x{7f}-\\x{ff}]\n        \t\t\t            [a-zA-Z0-9_\\x{7f}-\\x{ff}]*?\\b",
                    "name": "variable.other"
                }
            ]
        },
        "numeric": {
            "patterns": [
                {
                    "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
                    "name": "constant.numeric.c"
                }
            ]
        },
        "pixelformat": {
            "patterns": [
                {
                    "match": "\\b(PF_BYTE_(LA|RGB|BGR|RGBA|BGRA)|PF_L(8|16)|PF_A8|PF_A4L4|PF_R5G6B5|PF_B5G6R5|PF_R3G3B2|PF_A4R4G4B4|PF_A1R5G5B5|PF_R8G8B8|PF_B8G8R8|PF_A8R8G8B8|PF_A8B8G8R8|PF_B8G8R8A8|PF_R8G8B8A8|PF_X8R8G8B8|PF_X8B8G8R8|PF_A2R10G10B10|PF_A2B10G10R10|PF_SHORT_(GR|RGB|RGBA)|PF_DEPTH(16|32F?)|PF_PVRTC_RGBA?(2|4)|PF_R8|PF_RG8|PF_A8R8G8B8|PF_R8G8B8A8|PF_R8G8B8|PF_FLOAT(16|32)_(R|GR|RGB|RGBA))\\b",
                    "name": "storage.type"
                }
            ]
        },
        "boolean": {
            "patterns": [
                {
                    "match": "\\b(true|false|TRUE|FALSE|yes|no|YES|NO|on|off|ON|OFF)\\b",
                    "name": "constant.language.c"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "meta.toc-list.banner.block.c"
                        }
                    },
                    "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
                    "name": "comment.block.c"
                },
                {
                    "begin": "/\\*",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.begin.c"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.end.c"
                        }
                    },
                    "name": "comment.block.c"
                },
                {
                    "match": "\\*/.*\\n",
                    "name": "invalid.illegal.stray-comment-end.c"
                },
                {
                    "captures": {
                        "1": {
                            "name": "meta.toc-list.banner.line.c"
                        }
                    },
                    "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
                    "name": "comment.line.banner.c++"
                },
                {
                    "begin": "(^[ \\t]+)?(?=//)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.c++"
                        }
                    },
                    "end": "(?!\\G)",
                    "patterns": [
                        {
                            "begin": "//",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.comment.c++"
                                }
                            },
                            "end": "\\n",
                            "name": "comment.line.double-slash.c++",
                            "patterns": [
                                {
                                    "match": "(?>\\\\\\s*\\n)",
                                    "name": "punctuation.separator.continuation.c++"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "string-double-quoted": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.php"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.php"
				}
			},
			"name": "string"
		}
    }
}
